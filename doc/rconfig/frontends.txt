rconfig frontends                                                3 Jul 2017


                         I. Introduction

This document describes how to write a frontend for rconfig, radix's
configuration system. The rconfig system itself will not be described
in detail; see doc/rconfig/rconfig.txt for more information on it.

This document will follow a tutorial-like structure in which a very basic
(and very stupid) rconfig frontend will be written. Proficient knowledge of
the C programming language is assumed, as well as familiarity with a Unix
shell. (As if anyone reading documentation for an OS project lacks those.)


                        II. Getting started

The rconfig root is in util/rconfig. This directory contains three
subdirectories:

frontends/      source code for each frontend
include/        location of rconfig.h
lib/            librconfig source code

To write an rconfig frontend, we will need to create a subdirectory within
frontends/ to store our frontend source files. The name of this directory is
important: it will be the name of our frontend. For this tutorial, we will
name our frontend blarb:

$ mkdir frontends/blarb

Let's create our (only) source file:

$ touch frontends/blarb/blarb.c

...and we're ready to go.


                      III. The librconfig API

librconfig exposes six functions for you to use in your frontend.


void rconfig_set_archdir(const char *archdir);

This function sets the radix architecture-specific directory to use for the
configuration. Calling it is mandatory; if it is not called, the behaviour of
all other librconfig calls is undefined.
For example, if you want to configure radix for i386, you would call

rconfig_set_archdir("arch/i386");

Typically, your frontend will have the user pass the desired architecture as
an argument to the program.


int rconfig_verify_src_dirs(const char **errdir);

Verify that all radix source directories, and the root rconfig file, are
present and readable. This function should be called after setting the
architecture directory and before any actual config processing is done.

The function returns 0 on success, or an errno.h constant indicating the
error otherwise (e.g. ENOENT, EACCES, etc.). Typically, an error indicates
that the program is not being run from the radix root directory.
This function has one special return value: if an error occurred on the
provided architecture-specific directory, rconfig_verify_src_dirs will
return EINVAL. Your frontend should interpret this as an indication that
the provided architecture is not supported.

The name of the faulting directory/file is stored in the `errdir` argument.


void rconfig_parse_file(const char *path,
                        config_fn callback,
                        unsigned int flags);

Parse the rconfig file located at `path` and call the given callback
function as specified by `flags` (see section V, "Callback functions").
If `path` is not a valid rconfig file, behaviour is undefined.

This function does report any errors; if it fails, it will fail silently.
Ensure that `path` points a valid, readable file before calling it.


void rconfig_recursive(config_fn callback, unsigned int flags);

Recursively search radix source directories for rconfig files, parse them,
and call the given callback function as specified by `flags`.
See section V, "Callback functions", for more information.


int rconfig_concatenate(const char *outfile);

Concatenate all generated partial rconfig outputs into a complete rconfig
file `outfile`. If `outfile` is NULL, use the default output file
"config/config".

Returns 0 on success or 1 on failure. If unsuccessful, `outfile` is deleted.


void rconfig_cleanup_partial(void);

Destroy the current partial file, if one exists. This function should be
called whenever your program exits prematurely, e.g. if a signal is
received. If it is not called, a partial file may be left in an
inconsistent state.


                      IV. Writing a frontend

Each rconfig frontend needs to provide two things: a main function to
run the program and a callback function which selects a config setting.

The main function is relatively straightforward: it will perform the
required initialization for your frontend and use the librconfig API to
process rconfig files.

A sample main implementation for blarb is as follows:

#include <rconfig.h>

/* see section V */
void blarb_callback(void *config);

void signal_cleanup(int sig)
{
        rconfig_cleanup_partial();
        exit(0);

        (void)sig;
}

int main(int argc, char **argv)
{
        char arch_dir[256];
        const char *errdir;
        int err;

        if (argc == 1)
                return 1;

        snprintf(arch_dir, 256, "arch/%s", argv[1]);
        rconfig_set_archdir(arch_dir);

        err = rconfig_verify_src_dirs(&errdir);
        switch (err) {
        case 0:
                break;
        case EINVAL:
                fprintf(stderr, "invalid architecture: %s\n", argv[1]);
                return 1;
        default:
                fprintf(stderr, "%s: %s\n", errdir, strerror(err));
                return 1;
        }

        /* cleanup if we exit prematurely */
        signal(SIGINT, signal_cleanup);
        signal(SIGTERM, signal_cleanup);

        /*
         * Read all rconfig files in radix source tree
         * and write output to config/config.
         */
        rconfig_recursive(blarb_callback, RCONFIG_CB_CONFIG);
        return rconfig_concatenate(NULL);
}


                       V. Callback functions

The rconfig_parse_file and rconfig_recursive functions take a callback function
as an argument. This callback function is of type `config_fn`, which is defined
in rconfig.h:

typedef void (*config_fn)(void *);

The type of the argument to this function, and when it is called, is determined
by the `flags` argument of the functions `rconfig_parse_file` and
`rconfig_recursive`.

There are three possible `flags` values:

* RCONFIG_CB_CONFIG
  Call the callback function for each config setting found within the rconfig
  files, passing that setting's struct rconfig_rconfig as the argument.

* RCONFIG_CB_SECTION
  Call the callback function for each section within the rconfig files,
  passing the sections's struct rconfig_section as the argument.

* RCONFIG_CB_FILE
  Call the callback function for each complete rconfig file, passing an
  rconfig_file struct as the argument.

The aforementioned structures are defined as follows:

struct rconfig_file {
        char                    *name;
        const char              *path;
        size_t                  alloc_size;
        size_t                  num_sections;
        struct rconfig_section  *sections;
};

struct rconfig_section {
        char                    *name;
        size_t                  alloc_size;
        size_t                  num_configs;
        struct rconfig_config   *configs;
        struct rconfig_file     *file;
};

struct rconfig_option {
        int  val;
        char *desc;
};

struct rconfig_config_options {
        size_t                  alloc_size;
        size_t                  num_options;
        struct rconfig_option   *options;
};

struct rconfig_config_int_lim {
        int min;
        int max;
};

struct rconfig_config {
        char                    identifier[32];
        char                    desc[64];
        int                     type;
        int                     default_val;
        int                     default_set;
        int                     selection;
        union {
                struct rconfig_config_int_lim lim;
                struct rconfig_config_options opts;
        };
        struct rconfig_section  *section;
};

Let's go through their fields.

1. rconfig_file

  * name
    The configfile name of the rconfig file.

  * path
    The filesystem path to the file, from the current directory.

  * alloc_size
    For internal use, should be ignored.

  * num_sections
    The number of sections in the rconfig file.

  * sections
    Array of sections in the file.

2. rconfig_section

  * name
    The name of the section.

  * alloc_size
    For internal use, should be ignored.

  * num_configs
    The number of config settings in this section.

  * configs
    Array of config settings in this section.

  * file
    Pointer to the file in which this section occurs.

3. rconfig_config

  * identifier
    The name of the config setting. This is the value that follows the
    `config` keyword in rconfig files.
    e.g. if the file contains

    config MAX_CPUS

    `identifier` will be "MAX_CPUS".

  * desc
    The description of the setting, as given by the `desc` keyword in
    rconfig files.

  * type
    The type of the setting. One of RCONFIG_BOOL, RCONFIG_INT or RCONFIG_OPTIONS.

  * default_val
    The default value for the setting.
    For RCONFIG_BOOL, 1 is true and 0 is false.
    For RCONFIG_INT, this is simply a number.
    For RCONFIG_OPTIONS, this number is the 1-based index of the default choice
    in the opts.options array (i.e. default_val == 2 => default is options[1]).

  * default_set
    Whether a default value has been set (always 1).

  * selection
    The selected value for the setting. Your callback function must set this.

  * lim
    If `type == RCONFIG_INT`, lim is a struct containing the minimum and maximum
    values for the setting.

  * opts
    If `type == RCONFIG_OPTIONS`, opts stores information about each option.

    - opts.alloc_size
      For internal use, should be ignored.

    - opts.num_options
      The number of options for this setting.

    - opts.options
      The array of options for this setting.
      Each option is a struct rconfig_option with two fields:
        i. val
           The value of the option. Can be ignored.
        ii. desc
           The description of the option.

  * section
    A pointer to the struct rconfig_section representing the section in which
    this setting is found.

All structures passed to a callback function are guaranteed to be well-formed
and logically consistent.

The purpose of the callback function is to process the structures, output any
required information to the user, and return the desired setting through the
`selection` member of each rconfig_config struct.

For blarb, our callback function will be very simple and not interact with
the user.

void blarb_callback(void *config)
{
        int magic;
        /* we passed RCONFIG_CB_CONFIG to rconfig_recursive */
        struct rconfig_config *conf = config;

        switch (conf->type) {
        case RCONFIG_BOOL:
                /*
                 * We will return true for every bool because
                 * more features is better, right?
                 */
                conf->selection = 1;
                break;
        case RCONFIG_INT:
                /*
                 * We're going to return a random value in the setting's range.
                 * Yes, this is a terrible way to select a random value due to
                 * modulo bias. No, I don't care. This function is silly anyway.
                 */
                srand(time(NULL));
                magic = rand() % (conf->lim.max - conf->lim.min);
                conf->selection = conf->lim.min + magic;
                break;
        case RCONFIG_OPTIONS:
                /*
                 * Let's select the last option, since it has a higher chance of
                 * being correct. (Not that there is a correct choice here.)
                 *
                 * IMPORTANT: the return value for an RCONFIG_OPTIONS setting is
                 *            ** 1-INDEXED **
                 * The selected option will be
                 * `conf->opts.options[callback(conf) - 1]`.
                 */
                 conf->selection = conf->opts.num_options;
                 break;
        default:
                /* will never happen */
                exit(1);
        }
}

And there we have it. Our callback function.


                       VI. Compiling a frontend

Now that we have a complete frontend, we need to add it to the rconfig Makefile.
At the top of the Makefile, you will see a section marked by the following
comment:

# Define rconfig frontends here

Within this section, we're going to add our blarb frontend.
First, we need to set a program name. This should be unique among existing
program names.

ifeq ($(FRONTEND),blarb)
        PROGRAM_NAME := blarconfig
endif

Next, we'll add our object files, of which there is only one.

BLARB_OBJ := blarb.o

NOTE: The names of the frontend and object variables in the Makefile must match
      the directory in which your frontend is stored.

That's all there is to the Makefile.

We can now compile our frontend by running

$ FRONTEND=blarb make

And run it from the radix source directory:

$ util/config/blarconfig i386


                           VII. Conclusion

This document described the process of building a new frontend for rconfig.
While blarb is not exactly useful, the information written here can be used
to create a valuable rconfig frontend, such as a graphical one, to make the
kernel configuration process simpler for users.

Please do not submit pull requests adding the blarb frontend to the kernel.
